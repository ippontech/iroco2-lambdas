name: Reusable - Build and Release Lambda

on:
  workflow_call:
    inputs:
      lambda-name:
        description: 'The short name of the lambda (e.g., scanner, analyzer)'
        required: true
        type: string
      lambda-path:
        description: 'The path to the lambda function root directory'
        required: true
        type: string
      handler-dir:
        description: 'The name of the directory containing the handler code (e.g., package, src)'
        required: true
        type: string
      build-command:
        description: 'An optional command to run to build layers or other dependencies'
        required: false
        type: string

permissions:
  contents: write

jobs: # TODO: make the lambda directories more consistent (e.g., use src for all lambdas, same way to build layers, etc...)
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up environment
        run: |
          FUNC_DIR=${{ inputs.lambda-path }}
          LAYERS_DIR=${FUNC_DIR}/layers
          HANDLER_DIR=${FUNC_DIR}/${{ inputs.handler-dir }}
          OUT_DIR=${FUNC_DIR}/dist
          echo "FUNC_DIR=${FUNC_DIR}" >> $GITHUB_ENV
          echo "LAYERS_DIR=${LAYERS_DIR}" >> $GITHUB_ENV
          echo "HANDLER_DIR=${HANDLER_DIR}" >> $GITHUB_ENV
          echo "OUT_DIR=${OUT_DIR}" >> $GITHUB_ENV
          mkdir -p ${OUT_DIR}

      - name: Run build script (if provided)
        if: "${{ inputs.build-command != '' }}"
        run: |
          cd ${{ env.FUNC_DIR }}
          ${{ inputs.build-command }} ${{ env.OUT_DIR }}/${{ inputs.lambda-name }}-layers.zip
        shell: bash

      - name: Create layers.zip
        if: "${{ inputs.build-command == '' }}"
        run: |
          cd "$LAYERS_DIR"
          zip -r ../dist/${{ inputs.lambda-name }}-layers.zip . -x "*/.*"
        shell: bash

      - name: Create handler.zip
        run: |
          # For the analyzer, zip the handler directory from its parent.
          # For all others, cd into the handler directory and zip its contents.
          if [[ "${{ inputs.lambda-name }}" == "analyzer" ]]; then
            cd ${{ env.FUNC_DIR }}
            zip -r ${{ env.OUT_DIR }}/${{ inputs.lambda-name }}-handler.zip ${{ inputs.handler-dir }} -x "*/.*"
          else
            cd ${{ env.HANDLER_DIR }}
            zip -r ${{ env.OUT_DIR }}/${{ inputs.lambda-name }}-handler.zip . -x "*/.*"
          fi
        shell: bash

      - name: Prepare config for release
        run: cp ${{ env.FUNC_DIR }}/lambda.yaml ${{ env.OUT_DIR }}/${{ inputs.lambda-name }}-lambda.yaml

      - name: Create Release and Upload Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }} \
            --generate-notes \
            --title "Release ${{ inputs.lambda-name }} ${{ github.ref_name }}" \
            ${{ env.OUT_DIR }}/${{ inputs.lambda-name }}-layers.zip \
            ${{ env.OUT_DIR }}/${{ inputs.lambda-name }}-handler.zip \
            ${{ env.OUT_DIR }}/${{ inputs.lambda-name }}-lambda.yaml
